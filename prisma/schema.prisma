// schema.prisma
datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
}

model Profile {
  id       String @id @default(cuid())
  userId   String @unique
  name     String
  imageUrl String
  email    String

  designSystem   DesignSystem?
  streams        Stream[]
  constellations Constellation[]
  folders        Folder[]
  files          File[]
  mediaItems     MediaItem[]
  assets         Asset[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Stream {
  id        String  @id @default(cuid())
  name      String
  profileId String
  profile   Profile @relation(fields: [profileId], references: [id])
  flows     Flow[]

  @@index([profileId])
}

model Flow {
  id             String          @id @default(cuid())
  name           String
  type           FlowType
  streamId       String
  stream         Stream          @relation(fields: [streamId], references: [id])
  components     FlowComponent[] // Changed from flowComponent
  designSystemId String?
  designSystem   DesignSystem?   @relation(fields: [designSystemId], references: [id])
  nodes          Json
  isAppConfig    Boolean         @default(false)
  appId          String?

  @@index([streamId])
  @@index([designSystemId])
}

enum FlowType {
  DESIGN_SYSTEM
  APP_CONFIG
}

model FlowComponent {
  id         String   @id @default(cuid())
  name       String
  type       String
  value      String?
  opacity    Int?
  fontFamily String?
  flowId     String
  flow       Flow     @relation(fields: [flowId], references: [id])
  position   Json?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@index([flowId])
}

enum AssetType {
  IMAGE
  VIDEO
  FONT
}

enum AssetCategory {
  WALLPAPER
  DOCK_ICON
  WINDOW
  GENERAL
}

model Asset {
  id        String        @id @default(cuid())
  name      String
  type      AssetType
  category  AssetCategory
  url       String
  profileId String
  profile   Profile       @relation(fields: [profileId], references: [id])
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt

  @@index([profileId])
}

model DesignSystem {
  id               String            @id @default(cuid())
  name             String
  profileId        String            @unique
  profile          Profile           @relation(fields: [profileId], references: [id])
  flows            Flow[]
  colorTokens      ColorToken[]
  typographyTokens TypographyToken[]

  @@index([profileId])
}

model ColorToken {
  id             String       @id @default(cuid())
  name           String
  value          String
  opacity        Int
  designSystemId String
  designSystem   DesignSystem @relation(fields: [designSystemId], references: [id])

  @@index([designSystemId])
}

model TypographyToken {
  id             String       @id @default(cuid())
  name           String
  fontFamily     String
  fontSize       String?
  fontWeight     String?
  designSystemId String
  designSystem   DesignSystem @relation(fields: [designSystemId], references: [id])

  @@index([designSystemId])
}

model Constellation {
  id           String  @id @default(cuid())
  name         String
  profileId    String
  profile      Profile @relation(fields: [profileId], references: [id])
  isActive     Boolean @default(false)
  flowMappings Json // Maps appId to flowId

  @@index([profileId])
}

model Folder {
  id        String   @id @default(cuid())
  name      String
  profileId String
  profile   Profile  @relation(fields: [profileId], references: [id])
  parentId  String?
  parent    Folder?  @relation("FolderHierarchy", fields: [parentId], references: [id], onUpdate: Restrict, onDelete: Restrict)
  children  Folder[] @relation("FolderHierarchy")
  files     File[]
  isRoot    Boolean  @default(false)

  @@index([profileId])
  @@index([parentId])
}

model File {
  id        String  @id @default(cuid())
  name      String
  type      String
  content   Json?
  folderId  String
  folder    Folder  @relation(fields: [folderId], references: [id])
  profileId String
  profile   Profile @relation(fields: [profileId], references: [id])

  @@index([folderId])
  @@index([profileId])
}

model MediaItem {
  id        String    @id @default(uuid())
  name      String
  type      MediaType
  url       String
  profileId String
  profile   Profile   @relation(fields: [profileId], references: [id])

  @@index([profileId])
}

enum MediaType {
  IMAGE
  VIDEO
  FONT
}
