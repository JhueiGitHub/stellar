datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Profile {
  id        String   @id @default(cuid())
  userId    String   @unique
  name      String
  imageUrl  String
  email     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  designSystem DesignSystem?
  flows        Flow[]
  rootFolder   Folder?       @relation("ProfileRootFolder")
  rootFolderId String?       @unique
  folders      Folder[]
  files        File[]
}

model DesignSystem {
  id        String   @id @default(cuid())
  name      String
  profileId String   @unique
  profile   Profile  @relation(fields: [profileId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  colorTokens      ColorToken[]
  typographyTokens TypographyToken[]
  flows            Flow[]

  @@index([profileId])
}

model ColorToken {
  id             String       @id @default(cuid())
  name           String
  value          String
  opacity        Int
  designSystemId String
  designSystem   DesignSystem @relation(fields: [designSystemId], references: [id])
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  @@index([designSystemId])
}

model TypographyToken {
  id             String       @id @default(cuid())
  name           String
  fontFamily     String
  fontSize       String?
  fontWeight     String?
  lineHeight     String?
  letterSpacing  String?
  designSystemId String
  designSystem   DesignSystem @relation(fields: [designSystemId], references: [id])
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  @@index([designSystemId])
}

model Flow {
  id             String          @id @default(cuid())
  name           String
  description    String?
  profileId      String
  profile        Profile         @relation(fields: [profileId], references: [id])
  designSystemId String
  designSystem   DesignSystem    @relation(fields: [designSystemId], references: [id])
  components     FlowComponent[]
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt

  @@index([profileId])
  @@index([designSystemId])
}

model FlowComponent {
  id         String   @id @default(cuid())
  name       String
  type       String
  value      String?
  opacity    Int?
  fontFamily String?
  flowId     String
  flow       Flow     @relation(fields: [flowId], references: [id])
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@index([flowId])
}

model Folder {
  id            String   @id @default(cuid())
  name          String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  profileId     String
  profile       Profile  @relation(fields: [profileId], references: [id])
  parentId      String?
  parent        Folder?  @relation("FolderToFolder", fields: [parentId], references: [id])
  subfolders    Folder[] @relation("FolderToFolder")
  files         File[] // Explicitly define the files relation
  isRoot        Boolean  @default(false)
  rootProfile   Profile? @relation("ProfileRootFolder", fields: [rootProfileId], references: [id])
  rootProfileId String?  @unique

  @@index([profileId])
  @@index([parentId])
}

model File {
  id        String   @id @default(cuid())
  name      String
  type      String
  size      Int
  content   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  folderId  String
  folder    Folder   @relation(fields: [folderId], references: [id])
  profileId String
  profile   Profile  @relation(fields: [profileId], references: [id])

  @@index([folderId])
  @@index([profileId])
}
