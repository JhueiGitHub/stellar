datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

generator client {
  provider = "prisma-client-js"
}

model Profile {
  id       String @id @default(cuid())
  userId   String @unique
  name     String
  imageUrl String
  email    String

  designSystem    DesignSystem?
  flows           Flow[]
  folders         Folder[]
  files           File[]
  mediaItems      MediaItem[] // Added relation
  servers         Server[]
  members         Member[]
  channels        Channel[]
  vaults          Vault[]
  obsidianFolders ObsidianFolder[]
  obsidianNotes   ObsidianNote[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model DesignSystem {
  id        String   @id @default(cuid())
  name      String
  profileId String   @unique
  profile   Profile  @relation(fields: [profileId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  colorTokens      ColorToken[]
  typographyTokens TypographyToken[]
  flows            Flow[]

  @@index([profileId])
}

model ColorToken {
  id             String       @id @default(cuid())
  name           String
  value          String
  opacity        Int
  designSystemId String
  designSystem   DesignSystem @relation(fields: [designSystemId], references: [id])
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  @@index([designSystemId])
}

model TypographyToken {
  id             String       @id @default(cuid())
  name           String
  fontFamily     String
  fontSize       String?
  fontWeight     String?
  lineHeight     String?
  letterSpacing  String?
  designSystemId String
  designSystem   DesignSystem @relation(fields: [designSystemId], references: [id])
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  @@index([designSystemId])
}

model MediaItem {
  id        String    @id @default(uuid())
  name      String // Original filename
  type      MediaType // Enum for media types
  url       String // Uploadcare CDN URL
  profileId String
  profile   Profile   @relation(fields: [profileId], references: [id], onDelete: Cascade)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@index([profileId])
}

enum MediaType {
  IMAGE
  VIDEO
  FONT
}

model Flow {
  id             String          @id @default(cuid())
  name           String
  description    String?
  profileId      String
  profile        Profile         @relation(fields: [profileId], references: [id])
  designSystemId String
  designSystem   DesignSystem    @relation(fields: [designSystemId], references: [id])
  components     FlowComponent[]
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt

  @@index([profileId])
  @@index([designSystemId])
}

model FlowComponent {
  id         String   @id @default(cuid())
  name       String
  type       String
  value      String?
  opacity    Int?
  fontFamily String?
  flowId     String
  flow       Flow     @relation(fields: [flowId], references: [id])
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@index([flowId])
}

model Folder {
  id         String   @id @default(cuid())
  name       String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  profileId  String
  profile    Profile  @relation(fields: [profileId], references: [id])
  parentId   String?
  parent     Folder?  @relation("FolderToFolder", fields: [parentId], references: [id], onDelete: Restrict, onUpdate: Restrict)
  subfolders Folder[] @relation("FolderToFolder")
  files      File[]
  isRoot     Boolean  @default(false)

  @@index([profileId])
  @@index([parentId])
}

model File {
  id        String   @id @default(cuid())
  name      String
  type      String
  size      Int
  content   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  folderId  String
  folder    Folder   @relation(fields: [folderId], references: [id], onDelete: Restrict, onUpdate: Restrict)
  profileId String
  profile   Profile  @relation(fields: [profileId], references: [id])

  @@index([folderId])
  @@index([profileId])
}

model Vault {
  id        String           @id @default(uuid())
  name      String
  profileId String
  profile   Profile          @relation(fields: [profileId], references: [id], onDelete: Cascade)
  folders   ObsidianFolder[]
  notes     ObsidianNote[]
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt

  @@index([profileId])
}

model ObsidianFolder {
  id         String           @id @default(uuid())
  name       String
  vaultId    String
  vault      Vault            @relation(fields: [vaultId], references: [id], onDelete: Cascade)
  parentId   String?
  parent     ObsidianFolder?  @relation("ObsidianFolderToFolder", fields: [parentId], references: [id], onDelete: Restrict, onUpdate: Restrict)
  subfolders ObsidianFolder[] @relation("ObsidianFolderToFolder")
  notes      ObsidianNote[]
  profileId  String
  profile    Profile          @relation(fields: [profileId], references: [id])
  createdAt  DateTime         @default(now())
  updatedAt  DateTime         @updatedAt

  @@index([vaultId])
  @@index([parentId])
  @@index([profileId])
}

model ObsidianNote {
  id        String          @id @default(uuid())
  title     String
  content   String          @db.Text
  vaultId   String
  vault     Vault           @relation(fields: [vaultId], references: [id], onDelete: Cascade)
  folderId  String?
  folder    ObsidianFolder? @relation(fields: [folderId], references: [id])
  profileId String
  profile   Profile         @relation(fields: [profileId], references: [id])
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt

  @@index([vaultId])
  @@index([folderId])
  @@index([profileId])
}

model Server {
  id         String @id @default(uuid())
  name       String
  imageUrl   String @db.Text
  inviteCode String @unique

  profileId String
  profile   Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  members  Member[]
  channels Channel[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([profileId])
}

enum MemberRole {
  ADMIN
  MODERATOR
  GUEST
}

model Member {
  id   String     @id @default(uuid())
  role MemberRole @default(GUEST)

  profileId String
  profile   Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  serverId String
  server   Server @relation(fields: [serverId], references: [id], onDelete: Cascade)

  messages       Message[]
  directMessages DirectMessage[]

  conversationsInitiated Conversation[] @relation("MemberOne")
  conversationsReceived  Conversation[] @relation("MemberTwo")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([profileId])
  @@index([serverId])
}

enum ChannelType {
  TEXT
  AUDIO
  VIDEO
}

model Channel {
  id   String      @id @default(uuid())
  name String
  type ChannelType @default(TEXT)

  profileId String
  profile   Profile @relation(fields: [profileId], references: [id], onDelete: Cascade)

  serverId String
  server   Server @relation(fields: [serverId], references: [id], onDelete: Cascade)

  messages Message[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([profileId])
  @@index([serverId])
}

model Message {
  id      String  @id @default(uuid())
  content String  @db.Text
  fileUrl String? @db.Text

  memberId String
  member   Member @relation(fields: [memberId], references: [id], onDelete: Cascade)

  channelId String
  channel   Channel @relation(fields: [channelId], references: [id], onDelete: Cascade)

  deleted Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([channelId])
  @@index([memberId])
}

model Conversation {
  id String @id @default(uuid())

  memberOneId String
  memberOne   Member @relation("MemberOne", fields: [memberOneId], references: [id], onDelete: Cascade)

  memberTwoId String
  memberTwo   Member @relation("MemberTwo", fields: [memberTwoId], references: [id], onDelete: Cascade)

  directMessages DirectMessage[]

  @@unique([memberOneId, memberTwoId])
  @@index([memberTwoId])
}

model DirectMessage {
  id      String  @id @default(uuid())
  content String  @db.Text
  fileUrl String? @db.Text

  memberId String
  member   Member @relation(fields: [memberId], references: [id], onDelete: Cascade)

  conversationId String
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  deleted Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([memberId])
  @@index([conversationId])
}
